// Generated by CoffeeScript 1.6.2
/*
 * @fileOverview .
 * @author 云谦 <sorrycc@gmail.com>
*/


(function() {
  var API_OPEN_GEOCODER, GeoCoder;

  API_OPEN_GEOCODER = "http://open.shou65.com/geocoder";

  this.GeoCoder = GeoCoder = (function() {
    /*
     * 解析 Google 接口返回的数据.
     * @param  {Object} data
     * @return {Object}
    */
    GeoCoder._parseData = function(data) {
      var address, result, type, _i, _len, _ref;

      result = {};
      result["location"] = data["formatted_address"];
      _ref = data["address_components"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        address = _ref[_i];
        type = address.types[0];
        switch (type) {
          case 'sublocality':
            result["district"] = address['long_name'];
            break;
          case 'locality':
            result["city"] = address['long_name'];
            break;
          case 'administrative_area_level_1':
            result["region"] = address['long_name'];
            break;
          case 'country':
            result["country"] = address['long_name'];
        }
        if ('route^^neighborhood'.indexOf(type) > -1) {
          result["street"] = address['long_name'];
        }
        if ('street_number^^establishment'.indexOf(type) > -1) {
          result["street_number"] = address['long_name'];
        }
      }
      result.latitude = data.geometry.location.lat;
      result.longitude = data.geometry.location.lng;
      return result;
    };

    /*
     * 根据关键字搜索位置信息.
     * @param  {String}   keyword
     * @param  {Function} cb
    */


    GeoCoder.search = function(keyword, cb) {
      var url,
        _this = this;

      keyword = encodeURIComponent(keyword);
      url = "http://maps.googleapis.com/maps/api/geocode/json?address=" + keyword + "&sensor=false&language=zh_CN";
      return $.ajax({
        url: url,
        crossDomain: true,
        success: function(data) {
          var result;

          if (data.status !== "OK") {
            return cb(data);
          }
          result = _this._parseData(data.results[0]);
          return cb(result);
        },
        error: function(e) {}
      });
    };

    function GeoCoder(el, formEl, options) {
      this.el = el;
      this.formEl = formEl;
      this.options = options != null ? options : {};
      this.bindEvents();
      this.init();
    }

    GeoCoder.prototype.init = function() {
      var val;

      val = this.el.val();
      if (!val) {
        this.search();
      }
      return this.createGeoBtn();
    };

    GeoCoder.prototype.createGeoBtn = function() {
      var btnEl,
        _this = this;

      if (_this.el.parent().attr("id") != "signup-form"){ // 注册界面不需要获取当前位置按钮
        btnEl = $("<button style=\"margin-left:6px;\" type=\"button\" class=\"btn\">获取当前位置</button>");
        if (this.options.btnCSS) {
          btnEl.css(this.options.btnCSS);
        }
        this.el.after(btnEl);
        return btnEl.on("click", function() {
          return _this.searchByLocation();
        }); 
      }
    };

    GeoCoder.prototype.trigger = function(event, data) {
      return $(document).trigger(event, data);
    };

    GeoCoder.prototype.bindEvents = function() {
      var _this = this;

      this.el.on("blur", function() {
        return _this.search(_this.el.val());
      });
      return this.el.on("keydown", function(e) {
        if (e.keyCode !== 13) {
          return;
        }
        _this.search(_this.el.val());
        return false;
      });
    };

    /*
     * 根据关键字搜索.
     * @param  {String} keyword
    */


    GeoCoder.prototype.search = function(keyword) {
      if (keyword) {
        return this.searchByGoogle(keyword);
      } else {
        return this.searchByIp();
      }
    };

    GeoCoder.searchByGoogle = function(keyword, cb) {
      return GeoCoder.search(keyword, cb);
    };

    GeoCoder.prototype.searchByGoogle = function(keyword) {
      var _this = this;

      return GeoCoder.searchByGoogle(keyword, function(data) {
        return _this.setData(data);
      });
    };

    GeoCoder.searchByIp = function(cb) {
      var _this = this;

      return $.ajax({
        dataType: "jsonp",
        url: API_OPEN_GEOCODER,
        success: function(data) {
          cb(data);
          return _this.searchByGoogle(data.city, cb);
        }
      });
    };

    GeoCoder.prototype.searchByIp = function() {
      var _this = this;

      return GeoCoder.searchByIp(function(data) {
        return _this.setData(data);
      });
    };

    GeoCoder.searchByLocation = function(cb) {
      var _this = this;

      if (!navigator.geolocation) {
        return this.searchByIp(cb);
      }
      return navigator.geolocation.getCurrentPosition(function(position) {
        var p;

        p = position.coords;
        return _this.searchByGoogle("" + p.latitude + "," + p.longitude, cb);
      }, function() {
        return _this.searchByIp(cb);
      });
    };

    GeoCoder.prototype.searchByLocation = function() {
      var _this = this;

      return GeoCoder.searchByLocation(function(data) {
        return _this.setData(data);
      });
    };

    GeoCoder.prototype.setData = function(data) {
      var k, v;

      if (!data.location) {
        data.location = data.city;
      }
      for (k in data) {
        v = data[k];
        this.setHidden(k, v);
      }
      return this.trigger("setLocationData", data);
    };

    GeoCoder.prototype.setHidden = function(k, v) {
      var _k;

      _k = "user[location_attributes][" + k + "]";
      if (this.formEl[0][_k]) {
        this.formEl[0][_k].value = v;
      }
      _k = "location[" + k + "]";
      if (this.formEl[0][_k]) {
        return this.formEl[0][_k].value = v;
      }
    };

    return GeoCoder;

  })();

}).call(this);
