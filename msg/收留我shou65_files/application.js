// Generated by CoffeeScript 1.6.2
/*
# 生日选择器.
*/


(function() {
  var cls, dataMap, el, formEl, initBirthday, parseData, weixinPopEl, _i, _j, _len, _len1, _ref, _ref1;

  initBirthday = function(el) {
    return $(el).datetimepicker({
      language: "zh-CN",
      startView: 4,
      minView: 2,
      autoclose: true,
      startDate: new Date(1942, 1, 1),
      endDate: new Date(1997, 1, 1)
    });
  };

  _ref = $("div.J_BirthdaySelector");
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    el = _ref[_i];
    initBirthday(el);
  }

  $(".select2").select2({
    allowClear: true
  });

  _ref1 = $("div.J_ControlHack");
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    el = _ref1[_j];
    cls = $(el).attr("data-cls");
    $("label", el).addClass(cls);
  }

  $(".QRcode_icon").hover(function() {
     $(this).next().css("visibility", "visible");
  });

  $(".QRcode_pop").hover(function() {}, function() {
     $(this).last().css("visibility", "hidden");
  });

  dataMap = {};

  $("#location_top").select2({
    formatNoMatches: function(){
      return "没有匹配的城市";   
    }, 
    query: function(query) {
      var data, term, text, url;

      term = query.term;
      data = {
        results: []
      };
      if (term.length < 2) {
        text = term.length === 0 ? "请输入.." : "请继续输入..";
        data.results.push({
          id: "",
          text: text
        });
        query.callback(data);
        return;
      }
      if (term.length >= 3) {
        text = "正在查询...";
        data.results.push({
          id: "",
          text: text
        });
        query.callback(data);
      }
      url = "/s/" + term;
      return $.ajax(url, {
        success: function(result) {
          var item, _i, _len;

          data = {
            results: []
          };
          for (_i = 0, _len = result.length; _i < _len; _i++) {
            item = result[_i];
            data.results.push({
              id: item.id,
              text: item.text
            });
            dataMap[item.id] = item;
          }
          if (result.code == 400){
            data.results.push({
              id: "",
              text: result.message
            });
          }
          return query.callback(data);
        },
        error: function(e) {
          var errors;

          errors = $.parseJSON(e.responseText);
          data.results.push({
            id: "",
            text: errors.message,
            locked: true
          });
          return query.callback(data);
        }
      });
    }
  });

  $("#location_top").on("select2-selecting", function(e) {
    if (e.val === "") {
      return e.preventDefault();
    }
  });

  formEl = $("#J_TopSearchForm");

  formEl.on("submit", function() {
    var count, key;

    key = $("#location_top").val();
    count = dataMap[key]["hosts"];
    if (count === 0) {
      $('#J_SearchModal').modal();
      $("#share").html($("#share").attr("data-text").replace("%%city%%", dataMap[key]["text"].split("(")[0]));
      return false;
    }
  });

  parseData = function(data) {
    var address, result, type, _k, _len2, _ref2;

    result = {};
    result["location"] = data["formatted_address"];
    _ref2 = data["address_components"];
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      address = _ref2[_k];
      type = address.types[0];
      switch (type) {
        case 'sublocality':
          result["district"] = address['long_name'];
          break;
        case 'locality':
          result["city"] = address['long_name'];
          break;
        case 'administrative_area_level_1':
          result["region"] = address['long_name'];
          break;
        case 'country':
          result["country"] = address['long_name'];
      }
      if ('route^^neighborhood'.indexOf(type) > -1) {
        result["street"] = address['long_name'];
      }
      if ('street_number^^establishment'.indexOf(type) > -1) {
        result["street_number"] = address['long_name'];
      }
    }
    result.latitude = data.geometry.location.lat;
    result.longitude = data.geometry.location.lng;
    return result;
  };

  this.geocoder = function(keyword, cb) {
    var url;

    keyword = encodeURIComponent(keyword);
    url = "http://maps.googleapis.com/maps/api/geocode/json?address=" + keyword + "&sensor=false&language=zh_CN";
    return $.ajax(url, {
      success: function(data) {
        var result;

        if (data.status !== "OK") {
          return cb(data);
        }
        result = parseData(data.results[0]);
        return cb(null, result);
      },
      error: function(e) {
        return cb(e);
      }
    });
  };

}).call(this);
